---
# Create Network Peering

- name: Peer DMZ and Private Networks
  community.aws.ec2_vpc_peer:
    region: "{{ aws_region }}"
    vpc_id: "{{ item.vpc_id }}"
    peer_vpc_id: "{{ item.peer_vpc_id }}"
    state: present
    tags:
      Name: "{{ item.vpc_id }}-{{ item.peer_vpc_id }}-peering"
      deployment: ansible
      ansible-role: peer_existing_networks
  register: peer_connections
  loop: "{{ peerings }}"
  tags:
    - peer

- name: Accept local VPC peering request
  community.aws.ec2_vpc_peer:
    region: "{{ aws_region }}"
    peering_id: "{{ item.peering_id }}"
    state: accept
  loop: "{{ peer_connections.results }}"
  register: action_peer
  tags:
    - peer

# Get VPC Info

- name: Get VPC details
  amazon.aws.ec2_vpc_net_info:
    region: "{{ aws_region }}"
    vpc_ids: "{{ security.security_groups | map(attribute='vpc_id') }}"
  register: vpcs
  tags:
    - vpcs

- name: Debug VPCs
  debug:
    var: vpcs
  tags:
    - vpcs

- name: Debug VPC mapping
  debug:
    var: (vpcs.vpcs | selectattr('id', '==', item.vpc_id) | first).id
  loop: "{{ security.security_groups }}"
  tags:
    - vpcs

# Update Security Groups

- name: Update security groups with all permissions
  amazon.aws.ec2_group:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    vpc_id: "{{ (vpcs.vpcs | selectattr('id', '==', item.vpc_id) | first).id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        cidr_ip: 10.0.0.0/8
        from_port: 0
        to_port: 65535
        rule_desc: allow all local network tcp traffic
      - proto: udp
        cidr_ip: 10.0.0.0/8
        from_port: 0
        to_port: 65535
        rule_desc: allow all local network udp traffic
      - proto: icmp
        cidr_ip: 10.0.0.0/8
        from_port: -1
        to_port: -1
        rule_desc: allow all local network icmp traffic
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all outbound traffic
  loop: "{{ security.security_groups }}"
  when: security.type == 'all'
  tags:
    - sg

- name: Update security groups with icmp permissions
  amazon.aws.ec2_group:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    vpc_id: "{{ (vpcs.vpcs | selectattr('id', '==', item.vpc_id) | first).id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        cidr_ip: 10.0.0.0/8
        from_port: 0
        to_port: 65535
        rule_desc: allow all local network tcp traffic
      - proto: udp
        cidr_ip: 10.0.0.0/8
        from_port: 0
        to_port: 65535
        rule_desc: allow all local network udp traffic
      - proto: icmp
        cidr_ip: 10.0.0.0/8
        from_port: -1
        to_port: -1
        rule_desc: allow all local network icmp traffic
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all outbound traffic
  loop: "{{ security.security_groups }}"
  when: security.type == 'icmp'
  tags:
    - sg

- name: Update security groups with ssh permissions
  amazon.aws.ec2_group:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    vpc_id: "{{ (vpcs.vpcs | selectattr('id', '==', item.vpc_id) | first).id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        cidr_ip: 10.0.0.0/8
        from_port: 0
        to_port: 65535
        rule_desc: allow all local network tcp traffic
      - proto: udp
        cidr_ip: 10.0.0.0/8
        from_port: 0
        to_port: 65535
        rule_desc: allow all local network udp traffic
      - proto: icmp
        cidr_ip: 10.0.0.0/8
        from_port: -1
        to_port: -1
        rule_desc: allow all local network icmp traffic
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all outbound traffic
  loop: "{{ security.security_groups }}"
  when: security.type == 'ssh'
  tags:
    - sg
